using System.Text;

namespace NonCryptoTests;

public class MurmurHashTest
{
    private static readonly byte[] Sample1 = Encoding.ASCII.GetBytes("");
    private static readonly byte[] Sample2 = Encoding.ASCII.GetBytes("a");
    private static readonly byte[] Sample3 = Encoding.ASCII.GetBytes("foobar");
    private static readonly int Seed1 = 123451;
    private static readonly int Seed2 = 154321;

    [Fact]
    public void MurmurHash3_X86_32()
    {
        Assert.Equal<uint>(Hash.MurmurHash3_X86_32(Sample1, Seed1), 0x51d37fd7);
        Assert.Equal(Hash.MurmurHash3_X86_32(Sample1, Seed2), 0xdc7e32ec);

        Assert.Equal<uint>(Hash.MurmurHash3_X86_32(Sample2, Seed1), 0x12176d0d);
        Assert.Equal(Hash.MurmurHash3_X86_32(Sample2, Seed2), 0xfa41e450);

        Assert.Equal<uint>(Hash.MurmurHash3_X86_32(Sample3, Seed1), 0xf672275);
        Assert.Equal<uint>(Hash.MurmurHash3_X86_32(Sample3, Seed2), 0xf247042);
    }

    [Fact]
    public void MurmurHash3_X86_128()
    {
        Assert.True(Hash.MurmurHash3_X86_128(Sample1, Seed1) is
            [0x26, 0xb0, 0x26, 0x12, 0xcc, 0x75, 0xab, 0xf9, 0xcc, 0x75, 0xab, 0xf9, 0xcc, 0x75, 0xab, 0xf9]);
        Assert.True(Hash.MurmurHash3_X86_128(Sample1, Seed2) is
            [0x83, 0x76, 0x19, 0xf4, 0x7e, 0xf7, 0x27, 0x25, 0x7e, 0xf7, 0x27, 0x25, 0x7e, 0xf7, 0x27, 0x25]);

        Assert.True(Hash.MurmurHash3_X86_128(Sample2, Seed1) is
            [0x01, 0xbe, 0x24, 0xb6, 0xf6, 0x21, 0xfe, 0xe0, 0xf6, 0x21, 0xfe, 0xe0, 0xf6, 0x21, 0xfe, 0xe0]);
        Assert.True(Hash.MurmurHash3_X86_128(Sample2, Seed2) is
            [0x3f, 0x4f, 0x01, 0xc2, 0x59, 0x1a, 0xd9, 0xa5, 0x59, 0x1a, 0xd9, 0xa5, 0x59, 0x1a, 0xd9, 0xa5]);

        Assert.True(Hash.MurmurHash3_X86_128(Sample3, Seed1) is
            [0x14, 0xb8, 0x92, 0xdd, 0x1a, 0x96, 0x93, 0x3e, 0xcc, 0xdb, 0xa1, 0xf9, 0xcc, 0xdb, 0xa1, 0xf9]);
        Assert.True(Hash.MurmurHash3_X86_128(Sample3, Seed2) is
            [0x43, 0xc6, 0x70, 0x1f, 0x45, 0x92, 0xa9, 0x7c, 0x54, 0x54, 0x23, 0xf5, 0x54, 0x54, 0x23, 0xf5]);
    }

    [Fact]
    public void MurmurHash3_X64_128()
    {
        Assert.True(Hash.MurmurHash3_X64_128(Sample1, Seed1) is
            [0x1f, 0x76, 0x09, 0xb3, 0x4c, 0xfa, 0x8e, 0x37, 0x04, 0x27, 0xbe, 0x0c, 0x65, 0x87, 0x43, 0x0b]);
        Assert.True(Hash.MurmurHash3_X64_128(Sample1, Seed2) is
            [0x1f, 0x9b, 0x7e, 0x59, 0x09, 0x0e, 0x39, 0xd3, 0xb4, 0x36, 0xed, 0xcf, 0x6f, 0x76, 0x32, 0x74]);

        Assert.True(Hash.MurmurHash3_X64_128(Sample2, Seed1) is
            [0x03, 0x8c, 0x72, 0xa8, 0x50, 0x3f, 0xf3, 0xeb, 0xa3, 0x25, 0x7e, 0x29, 0x56, 0x96, 0xd9, 0x44]);
        Assert.True(Hash.MurmurHash3_X64_128(Sample2, Seed2) is
            [0x5c, 0x60, 0xc1, 0x25, 0x87, 0x68, 0xa8, 0x19, 0x90, 0xb7, 0xc6, 0x45, 0x8b, 0x27, 0x4d, 0x4d]);

        Assert.True(Hash.MurmurHash3_X64_128(Sample3, Seed1) is
            [0xe4, 0x11, 0x83, 0xc8, 0xd8, 0x0c, 0xde, 0x49, 0xf7, 0x2f, 0xd7, 0x2a, 0x52, 0xfb, 0x05, 0xc6]);
        Assert.True(Hash.MurmurHash3_X64_128(Sample3, Seed2) is
            [0x3f, 0xa0, 0xa7, 0x5b, 0x25, 0x59, 0xf3, 0x22, 0xd8, 0x38, 0xc4, 0xf9, 0x63, 0x4c, 0x12, 0x6d]);
    }
}